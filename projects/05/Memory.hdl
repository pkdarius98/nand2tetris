/**
 * The Memory chip implements the complete address space of the Hack data memory,
 * including RAM, memory mapped screen, and memory mapped keyboard.
 * Outputs the value of the memory location specified by the address input.
 * If (load == 1), sets the memory location specified by the address input
 * to the value of the in input.
 * Address space rules:
 * Only the upper 16K + 8K + 1 words of the memory are used.
 * Access to address 0 to 16383 (0x0000 to 0x3FFF) results in accessing the RAM;
 * Access to address 16384 to 24575 (0x4000 to 0x5FFF) results in accessing the Screen memory map;
 * Access to address 24576 (0x6000) results in accessing the Keyboard memory map.
 */
CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    And16(a[0..14]=address, b[0..14]=address, out[14]=isNotRam,out[0..13]=addressRam,out[0..12]=addressScreen);
    Not(in=isNotRam, out=isRam);

    And(a=load, b=isRam, out=isLoadRam);
    Mux16(a=ramOut, b=in, sel=isLoadRam, out=ramIn);
    RAM16K(in=ramIn, load=isLoadRam, address=addressRam, out=ramOut);

    And(a=load, b=isNotRam, out=isLoadScreen);
    Mux16(a=screenOut, b=in, sel=isLoadScreen, out=screenIn);
    Screen(in=screenIn, load=isLoadScreen, address=addressScreen, out=screenOut);
    
    Keyboard(out=keyboardOut);
    And16(a=keyboardOut,b=keyboardOut,out[0..7]=keyboardIn);

    Or8Way(in=keyboardIn, out=isKeyBoard);

    Mux16(a=ramOut, b=screenOut, sel=isNotRam, out=screenOrRamOut);
    Mux16(a=screenOrRamOut, b=keyboardOut, sel=isKeyBoard, out=out);
}