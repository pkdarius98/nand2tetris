/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the output bits:
 * zr = (out == 0, 1, 0)
 * ng = (out < 0,  1, 0)
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not
CHIP ALU {
    IN
        x[16], y[16],  // 16-bit inputs    
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT
        out[16], // 16-bit output
        zr,      // (out == 0, 1, 0)
        ng;      // (out < 0,  1, 0)

    PARTS:
    // mux to zezo x
    Mux16(a=x,sel=zx,out=zerox);

    // mux to negate x
    Not16(in=zerox,out=negx);
    Mux16(a=zerox,b=negx,sel=nx,out=outx);

    // mux to zero y
    Mux16(a=y,sel=zy,out=zeroy);

    // mux to negate y
    Not16(in=zeroy,out=negy);
    Mux16(a=zeroy,b=negy,sel=ny,out=outy);

    // mux to add or and x y
    Add16(a=outx,b=outy,out=outadd);
    And16(a=outx,b=outy,out=outand);
    Mux16(a=outand,b=outadd,sel=f,out=xy);

    // Mux to negate output
    Not16(in=xy,out=negxy);
    Mux16(a=xy,b=negxy,sel=no,out=out,out[15]=signbit,out[0..7]=fhb,out[8..15]=lhb);

    Or8Way(in=fhb, out=o1);
    Or8Way(in=lhb, out=o2);
    Or(a=o1,b=o2,out=notzr);
    Not(in=notzr,out=zr);
    And(a=signbit,b=true,out=ng);
}